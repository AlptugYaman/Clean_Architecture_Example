// Mocks generated by Mockito 5.2.0 from annotations
// in tokens/test/presentation/bloc/listings_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tokens/src/core/network/network_exception.dart' as _i5;
import 'package:tokens/src/domain/entities/token/listings.dart' as _i6;
import 'package:tokens/src/domain/usecases/get_all_tokens.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetAllTokens].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllTokens extends _i1.Mock implements _i3.GetAllTokens {
  MockGetAllTokens() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkExceptions, _i6.Listings>> execute(
          int? page, int? pageSize) =>
      (super.noSuchMethod(Invocation.method(#execute, [page, pageSize]),
              returnValue:
                  Future<_i2.Either<_i5.NetworkExceptions, _i6.Listings>>.value(
                      _FakeEither_0<_i5.NetworkExceptions, _i6.Listings>()))
          as _i4.Future<_i2.Either<_i5.NetworkExceptions, _i6.Listings>>);
}
